import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/meal.dart';
import '../models/user.dart';
import '../constants/app_constants.dart';
import './storage_service.dart';
import 'ai_service.dart';

/// Service for handling meal recommendations
class MealService {
  // UUID generator
  static final _uuid = Uuid();
  /// Get meal recommendations based on user preferences and constraints
  static Future<List<Meal>> getMealRecommendations({
    required User? user,
    int count = 1,
    List<String>? preferredIngredients,
    List<String>? availableIngredients,
    List<String>? excludedIngredients,
    Map<String, dynamic>? nutritionGoals,
    String? mealType, // 'breakfast', 'lunch', 'dinner', 'snack'
    bool useFallbackModel = true, // Use local model if remote fails
  }) async {
    try {
      // Only use fallbacks in debug mode if explicitly requested      if (kDebugMode && !AppConstants.useAimlApi) {
        // For testing purposes, we can use the fallback meals
        debugPrint('Debug mode: Using fallback meals instead of AI service');
        // Get all possible fallback meals for this meal type
        final allFallbackMeals = _getFallbackMeals(mealType: mealType, availableIngredients: availableIngredients);
        
        // Select a random subset based on timestamp to ensure variety
        final resultCount = count > allFallbackMeals.length ? allFallbackMeals.length : count;
        final timestamp = DateTime.now().millisecondsSinceEpoch;
        final startIndex = timestamp % (allFallbackMeals.length > resultCount ? allFallbackMeals.length - resultCount + 1 : 1);
        
        final fallbackMeals = allFallbackMeals.sublist(startIndex, startIndex + resultCount);
        await _saveMealsToStorage(fallbackMeals);
        return fallbackMeals;
      }
      
      // Try to get meals from the AIML API
      final meals = await _getMealsFromAiml(
        user: user,
        count: count,
        preferredIngredients: preferredIngredients,
        availableIngredients: availableIngredients,
        excludedIngredients: excludedIngredients,
        nutritionGoals: nutritionGoals,
        mealType: mealType,
      );
      
      // If we got meals, return them
      if (meals.isNotEmpty) {
        // Save to local storage
        await _saveMealsToStorage(meals);
        return meals;
      }
        // If we reach here, we couldn't get meals from any source
      return _getFallbackMeals(mealType: mealType, availableIngredients: availableIngredients);
    } catch (e) {
      debugPrint('Error getting meal recommendations: $e');
      return _getFallbackMeals(mealType: mealType);
    }
  }
  /// Get meal recommendations from the AIML API
  static Future<List<Meal>> _getMealsFromAiml({
    required User? user,
    required int count,
    List<String>? preferredIngredients,
    List<String>? availableIngredients,
    List<String>? excludedIngredients,
    Map<String, dynamic>? nutritionGoals,
    String? mealType,
  }) async {
    try {
      // Prepare the prompt for the AI model
      final prompt = _buildMealPrompt(
        user: user,
        count: count,
        preferredIngredients: preferredIngredients,
        availableIngredients: availableIngredients, 
        excludedIngredients: excludedIngredients,
        nutritionGoals: nutritionGoals,
        mealType: mealType,
      );
        // System message to specify the role of the AI    final systemMessage = 'You are a nutrition expert and chef who creates healthy meal recommendations. Be creative and provide varied meal ideas - do not repeat meal suggestions you\'ve given before. You MUST use the available ingredients mentioned in the prompt for all recipes.';
      final fullPrompt = '$systemMessage\n\n$prompt';
      
      // Use the AiService to generate the meal recommendations      // Increase temperature for more varied responses
      final content = await AiService.generateText(
        prompt: fullPrompt,
        model: 'deepseek/deepseek-prover-v2',
        temperature: 0.9, // Higher temperature for more randomness
        maxOutputTokens: 1024,
      );
      
      // Parse the content into meals
      return _parseMealsFromAiResponse(content, 'aiml');
    } catch (e) {
      debugPrint('Error getting meals from AIML API: $e');
      return [];
    }
  }
  
  /// Build the prompt for the AI model based on user and preferences
  static String _buildMealPrompt({
    required User? user,
    required int count,
    List<String>? preferredIngredients,
    List<String>? availableIngredients,
    List<String>? excludedIngredients,
    Map<String, dynamic>? nutritionGoals,
    String? mealType,
  }) {
    // Default to a generic prompt if no user is provided
    final dietaryRestrictions = user?.dietaryRestrictions ?? [];
    final goalText = user?.targetWeightKg != null 
        ? 'target weight of ${user!.targetWeightKg} kg'
        : 'general health';
        
    final mealTypeText = mealType != null ? '$mealType' : 'meal';
    final preferredText = preferredIngredients != null && preferredIngredients.isNotEmpty
        ? 'preferred ingredients: ${preferredIngredients.join(", ")}'
        : '';
    final availableText = availableIngredients != null && availableIngredients.isNotEmpty
        ? 'available ingredients: ${availableIngredients.join(", ")}'
        : '';
    final excludedText = excludedIngredients != null && excludedIngredients.isNotEmpty
        ? 'exclude: ${excludedIngredients.join(", ")}'
        : '';
    final restrictionsText = dietaryRestrictions.isNotEmpty
        ? 'dietary restrictions: ${dietaryRestrictions.join(", ")}'
        : '';
      // Add a timestamp to ensure the AI doesn't cache responses
    final timestamp = DateTime.now().millisecondsSinceEpoch;
      return '''
    Create $count healthy $mealTypeText recipe(s) for weight loss with the following specifications:
    
    ${preferredText.isNotEmpty ? '$preferredText\n' : ''}
    ${availableText.isNotEmpty ? '$availableText\n' : ''}
    ${excludedText.isNotEmpty ? '$excludedText\n' : ''}
    ${restrictionsText.isNotEmpty ? '$restrictionsText\n' : ''}
    Goal: $goalText
    
    Current time: $timestamp (use this to create a unique meal recommendation)
    
    IMPORTANT: You MUST use the available ingredients mentioned above in your recipe. If no ingredients are specified, feel free to suggest any healthy ingredients.

    For each meal, provide:
    1. A catchy name
    2. A brief description emphasizing health benefits for weight loss
    3. List of ingredients with quantities
    4. Step-by-step cooking instructions 
    5. Nutritional information (calories, protein, carbs, fats)
      Format the response as a JSON array with the following structure for each meal. 
    Make sure all property names and string values are properly enclosed in double quotes:
    {
      "name": "Meal Name",
      "description": "Brief description",
      "ingredients": ["ingredient 1", "ingredient 2", ...],
      "instructions": ["step 1", "step 2", ...],
      "nutrients": {
        "calories": 000,
        "protein": 00,
        "carbs": 00,
        "fat": 00
      }
    }
    ''';
  }
    /// Parse the AI response into meal objects
  static List<Meal> _parseMealsFromAiResponse(String content, String source) {
    try {
      debugPrint('Parsing AI response for meal recommendations');
      
      // Clean up the content
      // Sometimes AI responses include markdown code block delimiters or extra text
      String cleanedContent = content;      // Remove markdown code block markers (```json and ```)
      cleanedContent = cleanedContent.replaceAll(RegExp(r'```json\s*|\s*```', multiLine: true), '');
      
      // Remove all HTML tags and attributes to prevent parsing issues
      cleanedContent = cleanedContent.replaceAll(RegExp(r'<[^>]*>', multiLine: true), '');
      
      // Remove line breaks and non-standard whitespace characters
      cleanedContent = cleanedContent.replaceAll(RegExp(r'<br\s*\/?>|&nbsp;|<\s*br\s*\/?>|<\s*\/?\s*br\s*\/?>', multiLine: true), ' ');
      
      // Fix specific issues seen in the API response
      cleanedContent = cleanedContent.replaceAll(RegExp(r'<emphsis on="true">(.*?)</emphsis>', multiLine: true), r'$1');
      cleanedContent = cleanedContent.replaceAll(RegExp(r'<emphasis>(.*?)</emphasis>', multiLine: true), r'$1');
        // Replace any character encoding issues with standard characters
      cleanedContent = cleanedContent.replaceAll('°C', '°C');
      
      // First, try to extract a JSON array
      final jsonArrayRegExp = RegExp(r'\[\s*\{.*?\}\s*\]', dotAll: true);
      final jsonArrayMatch = jsonArrayRegExp.firstMatch(cleanedContent);
      
      if (jsonArrayMatch != null) {
        debugPrint('Found JSON array in response');
        final jsonString = jsonArrayMatch.group(0)!;
        try {
          final List<dynamic> meals = jsonDecode(jsonString);
          return _createMealsFromJson(meals, source);
        } catch (jsonArrayError) {
          debugPrint('Error parsing JSON array: $jsonArrayError');
          // Fall through to next parsing method
        }
      }
      
      // Second, try to parse the entire content as a JSON array
      try {
        debugPrint('Trying to parse entire content as JSON array');
        final List<dynamic> meals = jsonDecode(cleanedContent);
        return _createMealsFromJson(meals, source);
      } catch (entireJsonError) {
        debugPrint('Error parsing entire content as JSON array: $entireJsonError');
        // Fall through to next parsing method
      }
      
      // Third, try to extract individual JSON objects
      debugPrint('Looking for individual JSON objects');
      final mealRegExp = RegExp(r'\{\s*"name".*?(?=\},|\}\s*$)', dotAll: true);
      final mealMatches = mealRegExp.allMatches(cleanedContent).map((m) => '${m.group(0)}}').toList();
      
      if (mealMatches.isNotEmpty) {
        debugPrint('Found ${mealMatches.length} individual meal objects');
        final List<dynamic> meals = [];
        
        for (final mealString in mealMatches) {
          try {
            final meal = jsonDecode(mealString);
            meals.add(meal);
          } catch (individualJsonError) {
            debugPrint('Error parsing individual meal JSON: $individualJsonError');
            // Continue with next meal
          }
        }
        
        if (meals.isNotEmpty) {
          return _createMealsFromJson(meals, source);
        }
      }
        // Fourth, look for any JSON-like structure and attempt to fix common issues
      debugPrint('Attempting to fix malformed JSON');
      String fixedContent = cleanedContent;      // Fix common JSON formatting issues
      // First, find any unquoted property names (like nutrients: { calories: 400 })
      // and replace them with properly quoted versions ("nutrients": { "calories": 400 })
      fixedContent = fixedContent.replaceAll(
        RegExp(r'(\w+):\s*([{\[]?)'), 
        r'"$1": $2'
      );
      
      // Remove trailing commas in objects and arrays
      fixedContent = fixedContent.replaceAll(
        RegExp(r',(\s*[}\]])'), 
        r'$1'
      );
      
      // Replace single quotes with double quotes
      fixedContent = fixedContent.replaceAll("'", '"');
      
      // Fix escaped backslashes
      fixedContent = fixedContent.replaceAll(
        RegExp(r'([^"\\])\\([^"\\])'), 
        r'$1\\$2'
      );
          
      // Remove any non-printable characters that could interfere with JSON parsing
      fixedContent = fixedContent.replaceAll(RegExp(r'[\u0000-\u001F]'), '');
      
      try {
        // Look for array pattern again with fixed content
        final fixedJsonArrayRegExp = RegExp(r'\[\s*\{.*?\}\s*\]', dotAll: true);
        final fixedJsonArrayMatch = fixedJsonArrayRegExp.firstMatch(fixedContent);
        
        if (fixedJsonArrayMatch != null) {
          final fixedJsonString = fixedJsonArrayMatch.group(0)!;
          final List<dynamic> meals = jsonDecode(fixedJsonString);
          return _createMealsFromJson(meals, source);
        }
      } catch (fixedJsonError) {
        debugPrint('Error parsing fixed JSON: $fixedJsonError');
      }
      
      // If all parsing attempts fail, log detailed failure
      debugPrint('All parsing methods failed. Content was: ${content.substring(0, content.length > 200 ? 200 : content.length)}...');
      return [];
    } catch (e) {
      debugPrint('Error parsing meals from AI response: $e');
      debugPrint('Content was: ${content.substring(0, content.length > 200 ? 200 : content.length)}...');
      return [];
    }
  }
  
  /// Create meal objects from parsed JSON
  static List<Meal> _createMealsFromJson(List<dynamic> mealsJson, String source) {
    return mealsJson.map((mealJson) {
      // Ensure correct types for nutrients
      final Map<String, dynamic> rawNutrients = mealJson['nutrients'] ?? {};
      final Map<String, double> nutrients = {};
      
      rawNutrients.forEach((key, value) {
        if (value is int) {
          nutrients[key] = value.toDouble();
        } else if (value is double) {
          nutrients[key] = value;
        } else if (value is String) {
          nutrients[key] = double.tryParse(value) ?? 0.0;
        }
      });
      
      return Meal(
        id: _uuid.v4(),
        name: mealJson['name'] ?? 'Unknown Meal',
        description: mealJson['description'] ?? '',
        ingredients: List<String>.from(mealJson['ingredients'] ?? []),
        instructions: List<String>.from(mealJson['instructions'] ?? []),
        nutrients: nutrients,
        createdAt: DateTime.now(),
        source: source,
      );
    }).toList();
  }
  
  /// Save meals to local storage
  static Future<void> _saveMealsToStorage(List<Meal> meals) async {
    final existingMeals = await loadMealRecommendations();
    
    // Add new meals to beginning of list
    final allMeals = [...meals, ...existingMeals];
    
    // Limit to 50 meals to avoid excessive storage use
    final limitedMeals = allMeals.length > 50 
        ? allMeals.sublist(0, 50) 
        : allMeals;
        
    final mealsJson = limitedMeals.map((meal) => meal.toJson()).toList();
    await StorageService.saveData('meal_recommendations', mealsJson);
  }
  
  /// Load meal recommendations from local storage
  static Future<List<Meal>> loadMealRecommendations() async {
    final mealsJson = await StorageService.loadData('meal_recommendations');
    
    if (mealsJson == null) {
      return [];
    }
    
    return (mealsJson as List).map((mealJson) => Meal.fromJson(mealJson)).toList();
  }
  /// Get fallback meals when AI recommendations fail  static List<Meal> _getFallbackMeals({String? mealType, List<String>? availableIngredients}) {
    final now = DateTime.now();
    final actualMealType = mealType ?? (now.hour < 11 ? 'breakfast' : (now.hour < 16 ? 'lunch' : 'dinner'));
    
    if (actualMealType == 'breakfast') {
      return [
        Meal(
          id: _uuid.v4(),
          name: 'Protein-Packed Oatmeal Bowl',
          description: 'A high-protein breakfast that will keep you full all morning, with slow-release carbs for sustained energy.',
          ingredients: [
            '1/2 cup rolled oats',
            '1 scoop protein powder',
            '1 tbsp chia seeds',
            '1/2 banana, sliced',
            '1 tbsp peanut butter',
            '1/2 cup almond milk',
          ],
          instructions: [
            'Combine oats, protein powder, and chia seeds in a microwave-safe bowl.',
            'Add almond milk and stir well.',
            'Microwave for 1-2 minutes, stirring halfway through.',
            'Top with sliced banana and peanut butter.',
          ],
          nutrients: {
            'calories': 350,
            'protein': 25,
            'carbs': 40,
            'fat': 12,
          },
          createdAt: now,
          source: 'fallback',
        ),
        // Additional breakfast option
        Meal(
          id: _uuid.v4(),
          name: 'Greek Yogurt Parfait',
          description: 'A protein-rich breakfast that supports muscle maintenance while creating a calorie deficit for weight loss.',
          ingredients: [
            '1 cup Greek yogurt (0% fat)',
            '1/4 cup mixed berries',
            '1 tbsp honey',
            '2 tbsp low-sugar granola',
            '1 tbsp sliced almonds',
          ],
          instructions: [
            'Layer half of the yogurt in a glass or bowl.',
            'Add half of the berries and a sprinkle of granola.',
            'Add the remaining yogurt and top with remaining berries, granola, and almonds.',
            'Drizzle with honey before serving.',
          ],
          nutrients: {
            'calories': 280,
            'protein': 22,
            'carbs': 30,
            'fat': 8,
          },
          createdAt: now,
          source: 'fallback',
        ),
        // Additional breakfast option
        Meal(
          id: _uuid.v4(),
          name: 'Spinach and Feta Egg White Omelette',
          description: 'A low-calorie, high-protein breakfast that will keep you satisfied while supporting your weight loss goals.',
          ingredients: [
            '4 egg whites',
            '1 cup fresh spinach, chopped',
            '2 tbsp feta cheese, crumbled',
            '1/4 cup cherry tomatoes, halved',
            '1 tbsp fresh herbs (dill or parsley)',
            'Salt and pepper to taste',
            'Cooking spray',
          ],
          instructions: [
            'Whisk egg whites with salt and pepper in a bowl.',
            'Heat a non-stick pan over medium heat and spray with cooking spray.',
            'Pour in egg whites and let cook until edges begin to set.',
            'Add spinach, tomatoes, and feta to one half of the omelette.',
            'Fold the other half over the filling and cook until eggs are set.',
            'Garnish with fresh herbs before serving.',
          ],
          nutrients: {
            'calories': 180,
            'protein': 24,
            'carbs': 6,
            'fat': 7,
          },
          createdAt: now,
          source: 'fallback',
        ),
      ];
    } else if (actualMealType == 'lunch') {
      return [
        Meal(
          id: _uuid.v4(),
          name: 'Mediterranean Chickpea Salad',
          description: 'A protein-rich salad with healthy fats and fiber to keep you satisfied while supporting your weight loss goals.',
          ingredients: [
            '1 can chickpeas, drained and rinsed',
            '1 cucumber, diced',
            '1 red bell pepper, diced',
            '1/2 red onion, finely chopped',
            '1/4 cup feta cheese, crumbled',
            '2 tbsp olive oil',
            '1 tbsp lemon juice',
            '1 tsp dried oregano',
            'Salt and pepper to taste',
          ],
          instructions: [
            'Combine chickpeas, cucumber, bell pepper, and onion in a large bowl.',
            'In a small bowl, whisk together olive oil, lemon juice, oregano, salt, and pepper.',
            'Pour dressing over salad and toss to combine.',
            'Top with crumbled feta cheese before serving.',
          ],
          nutrients: {
            'calories': 320,
            'protein': 15,
            'carbs': 35,
            'fat': 14,
          },
          createdAt: now,
          source: 'fallback',
        ),
        // Additional lunch option
        Meal(
          id: _uuid.v4(),
          name: 'Turkey and Avocado Lettuce Wraps',
          description: 'A low-carb lunch option packed with lean protein and healthy fats to boost metabolism and promote weight loss.',
          ingredients: [
            '4 large lettuce leaves (romaine or iceberg)',
            '4 oz sliced turkey breast',
            '1/2 avocado, sliced',
            '1/4 cup shredded carrots',
            '1/4 cup cucumber slices',
            '2 tbsp hummus',
            'Red pepper flakes to taste',
          ],
          instructions: [
            'Wash and dry lettuce leaves.',
            'Spread hummus on each lettuce leaf.',
            'Divide turkey, avocado, carrots, and cucumber among the leaves.',
            'Sprinkle with red pepper flakes if desired.',
            'Roll up lettuce leaves and secure with toothpicks if needed.',
          ],
          nutrients: {
            'calories': 250,
            'protein': 20,
            'carbs': 12,
            'fat': 15,
          },
          createdAt: now,
          source: 'fallback',
        ),
        // Additional lunch option
        Meal(
          id: _uuid.v4(),
          name: 'Quinoa Power Bowl',
          description: 'A nutrient-dense lunch that provides sustained energy while supporting your weight loss through balanced macronutrients.',
          ingredients: [
            '1/2 cup cooked quinoa',
            '3 oz grilled chicken breast, sliced',
            '1 cup mixed greens',
            '1/4 cup roasted sweet potatoes',
            '1/4 avocado, diced',
            '2 tbsp pumpkin seeds',
            '1 tbsp olive oil',
            '1 tsp balsamic vinegar',
            'Salt and pepper to taste',
          ],
          instructions: [
            'Place quinoa in a bowl and top with mixed greens.',
            'Add chicken, roasted sweet potatoes, and avocado.',
            'Sprinkle with pumpkin seeds.',
            'Drizzle with olive oil and balsamic vinegar.',
            'Season with salt and pepper, then toss gently before eating.',
          ],
          nutrients: {
            'calories': 400,
            'protein': 25,
            'carbs': 30,
            'fat': 18,
          },
          createdAt: now,
          source: 'fallback',
        ),
      ];
    } else if (actualMealType == 'snack') {
      return [
        Meal(
          id: _uuid.v4(),
          name: 'Greek Yogurt with Berries',
          description: 'A protein-rich snack that satisfies sweet cravings and helps control hunger between meals.',
          ingredients: [
            '1/2 cup Greek yogurt (0% fat)',
            '1/4 cup mixed berries',
            '1 tsp honey',
            '1 tbsp sliced almonds',
          ],
          instructions: [
            'Place Greek yogurt in a bowl.',
            'Top with mixed berries and almonds.',
            'Drizzle with honey before serving.',
          ],
          nutrients: {
            'calories': 130,
            'protein': 15,
            'carbs': 12,
            'fat': 3,
          },
          createdAt: now,
          source: 'fallback',
        ),
        // Additional snack option
        Meal(
          id: _uuid.v4(),
          name: 'Apple Slices with Almond Butter',
          description: 'A balanced snack combining fiber and protein to maintain stable blood sugar and support weight loss.',
          ingredients: [
            '1 medium apple, sliced',
            '1 tbsp almond butter',
            'Dash of cinnamon',
          ],
          instructions: [
            'Slice apple into wedges.',
            'Serve with almond butter for dipping.',
            'Sprinkle with cinnamon for extra flavor.',
          ],
          nutrients: {
            'calories': 160,
            'protein': 4,
            'carbs': 20,
            'fat': 8,
          },
          createdAt: now,
          source: 'fallback',
        ),
        // Additional snack option
        Meal(
          id: _uuid.v4(),
          name: 'Vegetable Sticks with Hummus',
          description: 'A low-calorie snack that provides essential nutrients and fiber while keeping you full between meals.',
          ingredients: [
            '1 cup mixed vegetable sticks (carrot, cucumber, bell pepper)',
            '2 tbsp hummus',
            'Pinch of paprika',
            'Fresh lemon juice (optional)',
          ],
          instructions: [
            'Wash and cut vegetables into sticks.',
            'Serve with hummus for dipping.',
            'Sprinkle hummus with paprika and a squeeze of lemon juice if desired.',
          ],
          nutrients: {
            'calories': 120,
            'protein': 5,
            'carbs': 12,
            'fat': 6,
          },
          createdAt: now,
          source: 'fallback',
        ),
      ];    } else {
      // dinner or other meal types
      return [
        Meal(
          id: _uuid.v4(),
          name: 'Baked Salmon with Roasted Vegetables',
          description: 'A high-protein, low-carb dinner rich in omega-3 fatty acids, perfect for supporting weight loss while providing essential nutrients.',
          ingredients: [
            '5 oz salmon fillet',
            '1 cup broccoli florets',
            '1 cup cauliflower florets',
            '1 medium carrot, sliced',
            '1 tbsp olive oil',
            '1 clove garlic, minced',
            '1 tsp lemon zest',
            '1/2 lemon, juiced',
            'Salt and pepper to taste',
            'Fresh dill (optional)',
          ],
          instructions: [
            'Preheat oven to 400°F (200°C).',
            'Toss vegetables with olive oil, garlic, salt, and pepper on a baking sheet.',
            'Place salmon on the same sheet, skin-side down.',
            'Season salmon with salt, pepper, and lemon zest.',
            'Bake for 15-20 minutes until salmon is cooked through and vegetables are tender.',
            'Squeeze lemon juice over everything and garnish with dill if using.',
          ],
          nutrients: {
            'calories': 380,
            'protein': 30,
            'carbs': 15,
            'fat': 22,
          },
          createdAt: now,
          source: 'fallback',
        ),
        // Additional dinner option
        Meal(
          id: _uuid.v4(),
          name: 'Zucchini Noodles with Turkey Meatballs',
          description: 'A low-carb alternative to traditional spaghetti that satisfies cravings while keeping calories in check for weight loss.',
          ingredients: [
            '2 medium zucchini, spiralized',
            '4 oz ground turkey',
            '1 tbsp almond flour',
            '1 tbsp grated Parmesan cheese',
            '1/2 tsp Italian seasoning',
            '1 clove garlic, minced',
            '1/2 cup marinara sauce (low-sugar)',
            '1 tbsp fresh basil, chopped',
            'Salt and pepper to taste',
            '1 tsp olive oil',
          ],
          instructions: [
            'In a bowl, combine ground turkey, almond flour, Parmesan, Italian seasoning, half the garlic, salt, and pepper.',
            'Form mixture into meatballs (about 1 inch in diameter).',
            'Heat olive oil in a pan over medium heat and cook meatballs until browned and cooked through.',
            'In another pan, sauté remaining garlic for 30 seconds, then add zucchini noodles and cook for 2-3 minutes.',
            'Heat marinara sauce separately and pour over zucchini noodles.',
            'Top with meatballs and garnish with fresh basil.',
          ],
          nutrients: {
            'calories': 320,
            'protein': 28,
            'carbs': 15,
            'fat': 16,
          },
          createdAt: now,
          source: 'fallback',
        ),
        // Additional dinner option
        Meal(
          id: _uuid.v4(),
          name: 'Stuffed Bell Peppers with Ground Chicken',
          description: 'A protein-rich dinner loaded with vegetables that supports metabolism and muscle retention during weight loss.',
          ingredients: [
            '2 large bell peppers, halved and seeded',
            '6 oz ground chicken',
            '1/3 cup cooked brown rice',
            '1/4 cup black beans, rinsed',
            '1/4 cup corn kernels',
            '2 tbsp red onion, diced',
            '1/4 cup salsa',
            '1/2 tsp cumin',
            '1/4 tsp chili powder',
            '2 tbsp shredded low-fat cheddar cheese',
            'Fresh cilantro for garnish',
          ],
          instructions: [
            'Preheat oven to 375°F (190°C).',
            'Cook ground chicken in a pan until no longer pink.',
            'Add rice, beans, corn, onion, salsa, cumin, and chili powder, and stir to combine.',
            'Place bell pepper halves on a baking sheet and fill with the chicken mixture.',
            'Top with shredded cheese and bake for 20-25 minutes until peppers are tender.',
            'Garnish with fresh cilantro before serving.',
          ],
          nutrients: {
            'calories': 360,
            'protein': 32,
            'carbs': 28,
            'fat': 12,
          },
          createdAt: now,
          source: 'fallback',
        ),
      ];
    }
    
    // If no ingredients are selected, return all meals for the meal type
    if (availableIngredients == null || availableIngredients.isEmpty) {
      return allPossibleMeals;
    }
    
    // Filter meals based on available ingredients
    // Only return meals that contain at least one of the selected ingredients
    final filteredMeals = allPossibleMeals.where((meal) {
      final lowerCaseIngredients = availableIngredients.map((e) => e.toLowerCase()).toList();
      
      // Check if any of the meal ingredients match the available ingredients
      for (final ingredient in meal.ingredients) {
        final lowerCaseIngredient = ingredient.toLowerCase();
        for (final availableIngredient in lowerCaseIngredients) {
          if (lowerCaseIngredient.contains(availableIngredient)) {
            return true;
          }
        }
      }
      return false;
    }).toList();
    
    // Return filtered meals if any; otherwise, return all meals as fallback
    return filteredMeals.isNotEmpty ? filteredMeals : allPossibleMeals;
  }
}
